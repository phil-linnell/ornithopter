/**
 * CSS Animation function
 *
 * Duration valus in seconds (s)
 *
 *
 *
*/



for i in 1..4 {

  // Return 4 sets of coordinates between 0 and 1
  // so, 20%, 40%, 60% and 80%
  t = i * 0.2;
  d = 1

  B1 = t * t * t
  B2 = 3 * t * t * (1 - t)
  B3 = 3 * t * (1 - t) * (1 - t)
  B4 = (1 - t) * (1 - t) * (1 - t)

  C1 = {x: 0,   y: 0}
  C2 = {x: 0,   y: 0.5}
  C3 = {x: 0.5, y: 1}
  C4 = {x: 1,   y: 1}

  x = C1.x * (B1 * d) + C2.x * (B2 * d) + C3.x * (B3 * d) + C4.x * (B4 * d);
  y = C1.y * (B1 * d) + C2.y * (B2 * d) + C3.y * (B3 * d) + C4.y * (B4 * d);

  div {
    x: x;
    y: y;
  }
}

animate-me(core, actions) {

  @keyframes {core.name} {

     for type, i in actions {

      $p = actions[type].property;
      $duration = actions[type].duration;
      $delay = actions[type].delay;

      if (actions[type].delay > 0) {
        {actions[type].delay / core.total-duration * 100%} {
          $p: actions[type].from;
        }
      } else {
        0% {
          $p: actions[type].from;
        }
      }

      {actions[type].total / core.total-duration * 100%} {
        $p: actions[type].to;
      }

      if (actions[type].duration < core.total-duration) {
        100% {
          $p: actions[type].to;
        }
      }

    }

  }

  animation: unquote(core.name + " " + core.total-duration + "s " + core.iteration + " " + core.curves);

}







/** Example
*/



$block-core = {
  name: block-move,
  total-duration: 2,
  iteration: infinite,
  curves: linear
}

$block-actions = {
  move: {
    property: transform,
    from: translateY(0px),
    to: translateY(100px),
    duration: 1.5,
    delay: 0.5,
    total: 2, // TODO: remove the need for this
    curves: {
      p1x: 0,
      p1y: 0,
      p2x: 0,
      p2y: 1
    }
  },
  fade: {
    property: opacity,
    from: 0,
    to: 1,
    duration: 0.5,
    delat: 0,
    total: 0.5
  }
}


.block {
  animate-me($block-core, $block-actions);
  width: 40px;
  height: @width;
  background: #000;
}
